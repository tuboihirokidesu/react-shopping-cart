{"version":3,"sources":["App.styles.ts","CartItem/CartItem.styled.ts","CartItem/CartItem.tsx","Cart/Cart.tsx","Item/Item.style.ts","Item/Item.tsx","App.tsx","index.tsx"],"names":["Wrapper","styled","div","StyledButton","IconButton","CartItem","item","addToCart","removeFromCart","title","className","price","amount","toFixed","Button","size","disableElevation","variant","onClick","id","src","image","alt","Cart","items","cartItems","length","map","reduce","ack","Item","handleAddToCart","description","getProducts","a","fetch","then","response","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","useEffect","console","log","clickedItem","prev","find","LinearProgress","Drawer","anchor","open","onClose","Badge","badgeContent","color","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"siBAGO,IAAMA,EAAUC,IAAOC,IAAV,KAIPC,EAAeF,YAAOG,IAAPH,CAAH,K,wdCLlB,IAAMD,EAAUC,IAAOC,IAAV,KC0CLG,EAlCmB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eACpD,OACE,eAAC,EAAD,WACE,gCACE,6BAAKF,EAAKG,QACV,sBAAKC,UAAU,cAAf,UACE,uCAAuB,IAAbJ,EAAKK,MAAf,YACA,wCAAWL,EAAKM,OAASN,EAAKK,MAAQ,KAAKE,QAAQ,GAAnD,eAEF,sBAAKH,UAAU,UAAf,UACE,cAACI,EAAA,EAAD,CACEC,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRC,QAAS,kBAAMV,EAAeF,EAAKa,KAJrC,eAQA,4BAAIb,EAAKM,SACT,cAACE,EAAA,EAAD,CACEC,KAAK,QACLC,kBAAgB,EAChBC,QAAQ,YACRC,QAAS,kBAAMX,EAAUD,IAJ3B,qBAUJ,qBAAKc,IAAKd,EAAKe,MAAOC,IAAKhB,EAAKG,YCTvBc,EApBe,SAAC,GAA8C,IAClDC,EADMC,EAA2C,EAA3CA,UAAWlB,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,eAIrD,OACE,eAACR,EAAD,WACE,oDACsB,IAArByB,EAAUC,OAAe,gDAAyB,KAClDD,EAAUE,KAAI,SAACrB,GAAD,OACb,cAAC,EAAD,CACEA,KAAMA,EACNC,UAAWA,EACXC,eAAgBA,OAGpB,2CAA2C,KAdtBgB,EAcSC,EAbhCD,EAAMI,QAAO,SAACC,EAAavB,GAAd,OAAuBuB,EAAMvB,EAAKM,OAASN,EAAKK,QAAO,KAalBE,QAAQ,GAAxD,gB,0eCvBC,IAAMb,EAAUC,IAAOC,IAAV,KCqBL4B,EAde,SAAC,GAA+B,IAA7BxB,EAA4B,EAA5BA,KAAMyB,EAAsB,EAAtBA,gBACrC,OACE,eAAC,EAAD,WACE,qBAAKX,IAAKd,EAAKe,MAAOC,IAAKhB,EAAKG,QAChC,gCACE,6BAAKH,EAAKG,QACV,4BAAIH,EAAK0B,cACT,mCAAM1B,EAAKK,YAEb,cAACG,EAAA,EAAD,CAAQI,QAAS,kBAAMa,EAAgBzB,IAAvC,6BCCA2B,EAAW,uCAAG,sBAAAC,EAAA,sEACLC,MAAM,qCAAqCC,MAAK,SAACC,GAAD,OAC3DA,EAASC,UAFO,mFAAH,qDAoFFC,EA9EH,WAAO,IAAD,EACgBC,oBAAS,GADzB,mBACTC,EADS,KACCC,EADD,OAEkBF,mBAAS,IAF3B,mBAETf,EAFS,KAEEkB,EAFF,OAGmBC,YACjC,WACAX,GAFMY,EAHQ,EAGRA,KAAMC,EAHE,EAGFA,UAAWC,EAHT,EAGSA,MAIzBC,qBAAU,WACRC,QAAQC,IAAIzB,KACX,CAACgB,IAEJ,IAmCuBjB,EAnCjBO,EAAkB,SAACoB,GACvBR,GAAa,SAACS,GASZ,OAPqBA,EAAKC,MAAK,SAAC/C,GAAD,OAAUA,EAAKa,KAAOgC,EAAYhC,MAQxDiC,EAAKzB,KAAI,SAACrB,GAAD,OACdA,EAAKa,KAAOgC,EAAYhC,GAAxB,2BACSb,GADT,IACeM,OAAQN,EAAKM,OAAS,IACjCN,KAIF,GAAN,mBAAW8C,GAAX,4BAAsBD,GAAtB,IAAmCvC,OAAQ,UAoB/C,OAAIkC,EAAkB,cAACQ,EAAA,EAAD,IAElBP,EAAc,uDAGhB,eAAC,EAAD,WACE,cAACQ,EAAA,EAAD,CAAQC,OAAO,QAAQC,KAAMhB,EAAUiB,QAAS,kBAAMhB,GAAY,IAAlE,SACE,cAAC,EAAD,CACEjB,UAAWA,EACXlB,UAAWwB,EACXvB,eA1BqB,SAACW,GAC5BwB,GAAa,SAACS,GAAD,OACXA,EAAKxB,QAAO,SAACC,EAAKvB,GAChB,OAAIA,EAAKa,KAAOA,EACM,IAAhBb,EAAKM,OAAqBiB,EACxB,GAAN,mBAAWA,GAAX,4BAAqBvB,GAArB,IAA2BM,OAAQN,EAAKM,OAAS,MAE3C,GAAN,mBAAWiB,GAAX,CAAgBvB,MAEjB,YAoBH,cAACH,EAAD,CAAce,QAAS,kBAAMwB,GAAY,IAAzC,SACE,cAACiB,EAAA,EAAD,CAAOC,cAjBUpC,EAiBkBC,EAhBvCD,EAAMI,QAAO,SAACC,EAAavB,GAAd,OAAuBuB,EAAMvB,EAAKM,SAAQ,IAgBJiD,MAAM,QAArD,SACE,cAAC,IAAD,QAGJ,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,gBACGnB,QADH,IACGA,OADH,EACGA,EAAMlB,KAAI,SAACrB,GAAD,OACT,cAACwD,EAAA,EAAD,CAAMxD,MAAI,EAAe2D,GAAI,GAAIC,GAAI,EAArC,SACE,cAAC,EAAD,CAAM5D,KAAMA,EAAMyB,gBAAiBA,KADrBzB,EAAKa,aCzFzBgD,EAAS,IAAIC,IACnBC,IAASC,OACP,cAACC,EAAA,EAAD,CAAqBJ,OAAQA,EAA7B,SACE,cAAC,EAAD,MAEFK,SAASC,eAAe,W","file":"static/js/main.a8b92c99.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nexport const Wrapper = styled.div`\n  margin: 40px;\n`;\n\nexport const StyledButton = styled(IconButton)`\n  position: fixed;\n  z-index: 100;\n  right: 20px;\n  top: 20px;\n`;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-family: Arial, Helvetica, sans-serif;\n  border-bottom: 1px solid lightblue;\n  padding-bottom: 20px;\n  div {\n    flex: 1;\n  }\n  .information,\n  .buttons {\n    display: flex;\n    justify-content: space-between;\n    margin-left: 20px;\n  }\n  img {\n    max-width: 80px;\n    object-fit: cover;\n    margin-left: 40px;\n  }\n`;\n","import { Button } from \"@material-ui/core\";\nimport { CartItemType } from \"../App\";\nimport { Wrapper } from \"./CartItem.styled\";\n\ntype Props = {\n  item: CartItemType;\n  addToCart: (clickdItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst CartItem: React.FC<Props> = ({ item, addToCart, removeFromCart }) => {\n  return (\n    <Wrapper>\n      <div>\n        <h3>{item.title}</h3>\n        <div className='information'>\n          <p>Price {item.price * 100}円</p>\n          <p>Total:{(item.amount * item.price * 100).toFixed(0)}円</p>\n        </div>\n        <div className='buttons'>\n          <Button\n            size='small'\n            disableElevation\n            variant='contained'\n            onClick={() => removeFromCart(item.id)}\n          >\n            -\n          </Button>\n          <p>{item.amount}</p>\n          <Button\n            size='small'\n            disableElevation\n            variant='contained'\n            onClick={() => addToCart(item)}\n          >\n            +\n          </Button>\n        </div>\n      </div>\n      <img src={item.image} alt={item.title} />\n    </Wrapper>\n  );\n};\n\nexport default CartItem;\n","import { CartItemType } from \"../App\";\nimport { Wrapper } from \"../App.styles\";\nimport CartItem from \"../CartItem/CartItem\";\n\ntype Props = {\n  cartItems: CartItemType[];\n  addToCart: (clickedItem: CartItemType) => void;\n  removeFromCart: (id: number) => void;\n};\n\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\n  const caluculateTotal = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount * item.price, 0);\n\n  return (\n    <Wrapper>\n      <h2>Your Shopping Cart</h2>\n      {cartItems.length === 0 ? <p>No item in Cart</p> : null}\n      {cartItems.map((item) => (\n        <CartItem\n          item={item}\n          addToCart={addToCart}\n          removeFromCart={removeFromCart}\n        />\n      ))}\n      <h2>Total : {(caluculateTotal(cartItems) * 100).toFixed(0)}円</h2>\n    </Wrapper>\n  );\n};\n\nexport default Cart;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  border: 1px solid lightblue;\n  border-radius: 20px;\n  height: 100%;\n  button {\n    border-radius: 0 0 20px 20px;\n  }\n  img {\n    max-height: 250px;\n    object-fit: cover;\n    border-radius: 20px 20px 0 0;\n  }\n  div {\n    font-family: Arial, Helvetica, sans-serif;\n    padding: 1rem;\n    height: 100%;\n  }\n`;\n","import { Button } from \"@material-ui/core\";\nimport { CartItemType } from \"../App\";\nimport { Wrapper } from \"./Item.style\";\n\ntype Props = {\n  item: CartItemType;\n  handleAddToCart: (item: CartItemType) => void;\n};\n\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => {\n  return (\n    <Wrapper>\n      <img src={item.image} alt={item.title} />\n      <div>\n        <h3>{item.title}</h3>\n        <p>{item.description}</p>\n        <h3>${item.price}</h3>\n      </div>\n      <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\n    </Wrapper>\n  );\n};\n\nexport default Item;\n","import { Badge, Drawer, Grid, LinearProgress } from \"@material-ui/core\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { StyledButton } from \"./App.styles\";\nimport Cart from \"./Cart/Cart\";\nimport Item from \"./Item/Item\";\nimport { Wrapper } from \"./Item/Item.style\";\n\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> => {\n  return await fetch(\"https://fakestoreapi.com/products\").then((response) =>\n    response.json()\n  );\n};\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>(\n    \"products\",\n    getProducts\n  );\n  useEffect(() => {\n    console.log(cartItems);\n  }, [cartOpen]);\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems((prev) => {\n      // 1. Is the item already added in the cart?\n      const isItemInCart = prev.find((item) => item.id === clickedItem.id);\n\n      // if (isItemInCart) {\n      //   return prev.map((item) => {\n      //     return { ...item, amount: item.amount + 1 };\n      //   });\n      // }\n      if (isItemInCart) {\n        return prev.map((item) =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      // First time the item is added\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems((prev) =>\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return ack;\n          return [...ack, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    );\n  };\n\n  const getTotalItems = (items: CartItemType[]) =>\n    items.reduce((ack: number, item) => ack + item.amount, 0);\n\n  if (isLoading) return <LinearProgress />;\n\n  if (error) return <div>Something went wrong</div>;\n\n  return (\n    <Wrapper>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart\n          cartItems={cartItems}\n          addToCart={handleAddToCart}\n          removeFromCart={handleRemoveFromCart}\n        />\n      </Drawer>\n      <StyledButton onClick={() => setCartOpen(true)}>\n        <Badge badgeContent={getTotalItems(cartItems)} color='error'>\n          <AddShoppingCartIcon />\n        </Badge>\n      </StyledButton>\n      <Grid container spacing={3}>\n        {data?.map((item) => (\n          <Grid item key={item.id} xs={12} sm={4}>\n            <Item item={item} handleAddToCart={handleAddToCart} />\n          </Grid>\n        ))}\n      </Grid>\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport App from \"./App\";\n\nconst client = new QueryClient();\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}